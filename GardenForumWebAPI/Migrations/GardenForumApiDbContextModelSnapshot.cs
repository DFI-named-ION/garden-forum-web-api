// <auto-generated />
using System;
using GardenForumWebAPI.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GardenForumWebAPI.Migrations
{
    [DbContext(typeof(GardenForumApiDbContext))]
    partial class GardenForumApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GardenForumWebAPI.Models.Article", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<string>("Body")
                        .HasMaxLength(1023)
                        .HasColumnType("nvarchar(1023)")
                        .HasColumnName("body");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime>("Publish")
                        .HasColumnType("datetime")
                        .HasColumnName("publish");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("short_description");

                    b.Property<string>("ShortTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("short_title");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("nvarchar(1023)")
                        .HasColumnName("slug");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("articles_id_primary");

                    b.HasIndex("AuthorId");

                    b.HasIndex(new[] { "Slug" }, "articles_slug_unique")
                        .IsUnique();

                    b.ToTable("articles", (string)null);
                });

            modelBuilder.Entity("GardenForumWebAPI.Models.ArticleLike", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint")
                        .HasColumnName("article_id");

                    b.Property<DateTime>("Publish")
                        .HasColumnType("datetime")
                        .HasColumnName("publish");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("article_likes_id_primary");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("article_likes", (string)null);
                });

            modelBuilder.Entity("GardenForumWebAPI.Models.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<string>("Body")
                        .HasMaxLength(1023)
                        .HasColumnType("nvarchar(1023)")
                        .HasColumnName("body");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<DateTime>("Publish")
                        .HasColumnType("datetime")
                        .HasColumnName("publish");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("short_description");

                    b.Property<string>("ShortTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("short_title");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("receipts_id_primary");

                    b.HasIndex("AuthorId");

                    b.ToTable("receipts", (string)null);
                });

            modelBuilder.Entity("GardenForumWebAPI.Models.ReceiptLike", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Publish")
                        .HasColumnType("datetime")
                        .HasColumnName("publish");

                    b.Property<long>("ReceiptId")
                        .HasColumnType("bigint")
                        .HasColumnName("receipt_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("receipt_likes_id_primary");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("UserId");

                    b.ToTable("receipt_likes", (string)null);
                });

            modelBuilder.Entity("GardenForumWebAPI.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("roles_id_primary");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("GardenForumWebAPI.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("display_name");

                    b.Property<DateTime>("LastOnline")
                        .HasColumnType("datetime")
                        .HasColumnName("last_online");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("users_id_primary");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Login" }, "users_login_unique")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("GardenForumWebAPI.Models.Article", b =>
                {
                    b.HasOne("GardenForumWebAPI.Models.User", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("articles_author_id_foreign");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("GardenForumWebAPI.Models.ArticleLike", b =>
                {
                    b.HasOne("GardenForumWebAPI.Models.Article", "Article")
                        .WithMany("ArticleLikes")
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("article_likes_article_id_foreign");

                    b.HasOne("GardenForumWebAPI.Models.User", "User")
                        .WithMany("ArticleLikes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("article_likes_user_id_foreign");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GardenForumWebAPI.Models.Receipt", b =>
                {
                    b.HasOne("GardenForumWebAPI.Models.User", "Author")
                        .WithMany("Receipts")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("receipts_author_id_foreign");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("GardenForumWebAPI.Models.ReceiptLike", b =>
                {
                    b.HasOne("GardenForumWebAPI.Models.Receipt", "Receipt")
                        .WithMany("ReceiptLikes")
                        .HasForeignKey("ReceiptId")
                        .IsRequired()
                        .HasConstraintName("receipt_likes_receipt_id_foreign");

                    b.HasOne("GardenForumWebAPI.Models.User", "User")
                        .WithMany("ReceiptLikes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("receipt_likes_user_id_foreign");

                    b.Navigation("Receipt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GardenForumWebAPI.Models.User", b =>
                {
                    b.HasOne("GardenForumWebAPI.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("users_role_id_foreign");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GardenForumWebAPI.Models.Article", b =>
                {
                    b.Navigation("ArticleLikes");
                });

            modelBuilder.Entity("GardenForumWebAPI.Models.Receipt", b =>
                {
                    b.Navigation("ReceiptLikes");
                });

            modelBuilder.Entity("GardenForumWebAPI.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GardenForumWebAPI.Models.User", b =>
                {
                    b.Navigation("ArticleLikes");

                    b.Navigation("Articles");

                    b.Navigation("ReceiptLikes");

                    b.Navigation("Receipts");
                });
#pragma warning restore 612, 618
        }
    }
}
